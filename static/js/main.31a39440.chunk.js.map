{"version":3,"sources":["components/mainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainPageDisplay","useState","days","setDays","hours","setHours","mins","setMins","secs","setSecs","interval","useRef","useEffect","targetDate","Date","getTime","current","setInterval","now","distance","currentdays","Math","floor","currenthours","currentmins","currentsec","clearInterval","startTimer","className","App","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEaA,EAAkB,WAAY,IAAD,EACdC,mBAAS,GADK,mBAC/BC,EAD+B,KACzBC,EADyB,OAEZF,mBAAS,GAFG,mBAE/BG,EAF+B,KAExBC,EAFwB,OAGdJ,mBAAS,GAHK,mBAG/BK,EAH+B,KAGzBC,EAHyB,OAIdN,mBAAS,GAJK,mBAI/BO,EAJ+B,KAIzBC,EAJyB,KAMlCC,EAAWC,mBA+Bf,OANAC,qBAAU,WAEN,OAzBe,WACf,IAAMC,EAAa,IAAIC,KAAK,8BAA8BC,UAE1DL,EAASM,QAAUC,aAAY,WAC3B,IAAMC,GAAM,IAAIJ,MAAOC,UACjBI,EAAWN,EAAaK,EAExBE,EAAcC,KAAKC,MAAMH,EAAQ,OACjCI,EAAeF,KAAKC,MAAMH,EAAQ,MAAR,MAC1BK,EAAcH,KAAKC,MAAMH,EAAQ,KAAR,MACzBM,EAAaJ,KAAKC,MAAMH,EAAQ,IAAiB,KAEnDA,EAAW,EACXO,cAAchB,EAASM,UAEvBb,EAAQiB,GACRf,EAASkB,GACThB,EAAQiB,GACRf,EAAQgB,MAEb,KAIHE,GACO,WACHD,cAAchB,EAASM,aAI3B,yBAAKY,UAAU,kBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,QACX,oCACA,4BAAK1B,IAET,yBAAK0B,UAAU,QACX,qCACA,4BAAKxB,IAET,yBAAKwB,UAAU,QACX,oCACA,4BAAKtB,IAET,yBAAKsB,UAAU,QACX,oCACA,4BAAKpB,OCxCVqB,MAVf,WACE,OACE,yBAAKD,UAAU,OACb,yBAAKE,IALU,qBAKSF,UAAU,kBAClC,yBAAKE,IALU,6BAKSF,UAAU,oBAClC,kBAAC,EAAD,QCCcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31a39440.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\r\n\r\nexport const MainPageDisplay = (): any => {\r\n    const [days, setDays] = useState(0)\r\n    const [hours, setHours] = useState(0)\r\n    const [mins, setMins] = useState(0)\r\n    const [secs, setSecs] = useState(0)\r\n\r\n    let interval = useRef<any>();\r\n\r\n    const startTimer = () => {\r\n        const targetDate = new Date('21 October 21 00:00:00 GMT').getTime(); \r\n        \r\n        interval.current = setInterval(() => {\r\n            const now = new Date().getTime();\r\n            const distance = targetDate - now;\r\n\r\n            const currentdays = Math.floor(distance / (1000* 60 * 60 * 24))\r\n            const currenthours = Math.floor(distance % (1000* 60 * 60 * 24) / (1000 * 60 * 60))\r\n            const currentmins = Math.floor(distance % (1000* 60 * 60)  / (1000 * 60 * 60))\r\n            const currentsec = Math.floor(distance % (1000* 60)  / 1000)\r\n\r\n            if (distance < 0) {\r\n                clearInterval(interval.current)\r\n            } else {\r\n                setDays(currentdays);\r\n                setHours(currenthours);\r\n                setMins(currentmins);\r\n                setSecs(currentsec)\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        startTimer();\r\n        return () => {\r\n            clearInterval(interval.current);\r\n        }\r\n    })\r\n    return (\r\n        <div className=\"main-container\">\r\n            <div className='date-container'>\r\n                <div className='date'>\r\n                    <h3>Days</h3>\r\n                    <h1>{days}</h1>\r\n                </div>\r\n                <div className='date'>\r\n                    <h3>Hours</h3>\r\n                    <h1>{hours}</h1>\r\n                </div>\r\n                <div className='date'>\r\n                    <h3>Mins</h3>\r\n                    <h1>{mins}</h1>\r\n                </div>\r\n                <div className='date'>\r\n                    <h3>Secs</h3>\r\n                    <h1>{secs}</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPageDisplay;","import React from 'react';\r\nimport './App.css';\r\nimport {MainPageDisplay} from './components/mainPage';\r\n\r\nconst pandaPicture = './assets/panda.png'\r\nconst fallingPanda = './assets/falling-panda.png'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={pandaPicture} className='panda-picture' />\r\n      <img src={fallingPanda} className='falling-picture' />\r\n      <MainPageDisplay />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import { createGlobalStyle } from 'styled-components';\r\n\r\n// const getFont = './assets/black-font.ttf'\r\n// const GlobalStyles = createGlobalStyle`\r\n//   body {\r\n//     @import url(${getFont});\r\n//     font-family: 'Black Vosten Personal Use';\r\n//   }`\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}